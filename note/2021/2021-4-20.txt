C++协程库Libco—原理与应用

## 好的提问
陈咬金的三板斧来
第一斧：为什么这么做，帮助解决了什么问题(Why)，
第二斧：原理是什么，分析技术本质(What)。
第三斧：技术场景是什么，发挥优势(how)


1. 为什么微信多线程模型，业务逻辑的并发能力只有几十到几百,ibco 支撑 8 亿用户?
把多进程、多线程服务改造成协程服务，并发能力得到百倍提升
按照道理单线程并发能力和强，但是比多线程强百倍也太夸张了吧？
存在数据造假还是我理解不了。
https://maimai.cn/web/gossip_detail?gid=28910888&egid=9b2f6774a56a11ebb4b5e4434b3cb1b0

多进程：nginx

协程, 即保持现场的可重入函数. 第二次调用的时候会在上次返回的地方继续, 而不是从头开始执行.

2. nginx 信号 是线程的吗

3. 什么是无栈协程
https://maimai.cn/web/gossip_detail?gid=28912873&egid=e125ed7ea5ae11eba507e4434b3cb1b0
## 使用场景

3. 单核多线程的意义何在

5 线程安全函数，函数相互调用会产生死锁，协程会吗？
 # Recursive locking opportunity

6 我对互斥锁一个困惑，锁能完成事情，根据能懒就懒的原则有锁了为啥还条件变量呢？线程通讯模型：共享内存，消息传递

7
线程有几种通讯方式？

回答：
消息传递方式(管道pipe，FIfo，消息队列 message queue，远程调用rpc，信号).
共享内存方式(进程在os开辟，线程是进程本身)
上面2个方式都需要同步，都需要借助锁，条件变量，信号方式。你说同步方式属于通讯模型吗？

提示线索：进程的通讯机制(ipc)也适合线程，线程的通讯方式也适合进程。
提示线索：UNIX网络编程卷2：进程间通信
隐藏副本，别人问的是通讯模型，有几个。



## 产品

libco的特性
无需侵入业务逻辑，把多进程、多线程服务改造成协程服务，并发能力得到百倍提升;
支持CGI框架，轻松构建web服务(New);
支持gethostbyname、mysqlclient、ssl等常用第三库(New);
可选的共享栈模式，单机轻松接入千万连接(New);
完善简洁的协程编程接口
类pthread接口设计，通过co_create、co_resume等简单清晰接口即可完成协程的创建与恢复；
__thread的协程私有变量、协程间通信的协程信号量co_signal (New);
语言级别的lambda实现，结合协程原地编写并执行后台异步任务 (New);
基于epoll/kqueue实现的小而轻的网络框架，基于时间轮盘实现的高性能定时器;


git clone https://github.com/Tencent/libco.git 
make
cat example_cond.cpp
strings /usr/lib/libstdc++.so.6.0.13 | grep CXXABI
cp libstdc++.so.6*   /usr/lib64
rm -f /usr/lib64/libstdc++.so.6 # 移出旧链接
ln -s /usr/lib64/libstdc++.so.6.0.22 /usr/lib64/libstdc++.so.6 # 创建新链接
strings /usr/lib64/libstdc++.so.6 | grep CXXABI

/app/work/libco


## 塔山
1. https://www.zhihu.com/question/52193579/answer/156692295 
    腾讯开源的 libco 号称千万级协程支持，那个共享栈模式原理是什么?
   https://github.com/tearshark/librf
   https://github.com/hnes/libaco/blob/master/README_zh.md#name
   https://www.boost.org/doc/libs/1_75_0/libs/coroutine/doc/html/coroutine/motivation.html
   http://akira.ruc.dk/~keld/research/COROUTINE/COROUTINE-1.0/DOC/COROUTINE_REPORT.pdf
   
2. https://www.infoq.cn/article/CplusStyleCorourtine-At-Wechat
- 异步化改造方案的考量：急需对微信后台进行异步化的改造
	当时我们有两种选择：
	A 线程异步化：把所有服务改造成异步模型，等同于从框架到业务逻辑代码的彻底改造
	B 协程异步化：对业务逻辑非侵入的异步化改造，即只修该少量框架代码
	B 协程方案不需要显式地维护异步状态,。因此在复杂系统上，协程服务的性能可能比纯异步模型更优
3.https://shockwave.me/8260120b7806  Stackless Coroutine  Stackless Resumable Functions
协程可以按照以下 3 个角度进行分类1:
对称/不对称. 前者提供让出执行权的原语, 后者提供唤起协程和把执行权转交给调用者的原语
第一类/受限. 协程是不是第一类对象
有栈/无栈. 协程能在调用栈的任意处挂起, 还是只能在协程的函数体内挂起
4. https://blog.csdn.net/cchd0001/article/details/50717525
   

并发编程的常见实现
目前，主流的并发编程实现有以下几种方式：

https://laravelacademy.org/post/19883 [这样回答根本不行]

通信顺序进程的概念（communicating sequential processes）
简写为CSP，一种类似于Actor模型（一种分布式并发编程模型）的概念
，但有更多的新特性以应对现今的大规模并发需求。这两个并发模型都利用了消息传递的机制，

但是Actor模型在状态容器之间传递消息，而CSP模型在通道之间传递消息 ，
通道是协程或类协程程序之间的同步和通信形式 
https://python.freelycode.com/contribution/detail/1822
5 https://ilily.site/actor-vs-csp/

Goroutine很大程度上降低了并发的开发成本，
是不是我们所有需要并发的地方直接 go func 就搞定了呢？ 
Go通过Goroutine的调度解决了CPU利用率的问题。
但遇到其他的瓶颈资源如何处理？比如带锁的共享资源，比如数据库连接等。
互联网在线应用场景下，如果每个请求都扔到一个Goroutine里，当资源出现瓶颈的时候，
会导致大量的Goroutine阻塞，最后用户请求超时。
这时候就需要用Goroutine池来进行控流，
同时问题又来了：池子里设置多少个Goroutine合适？
其消息传递更加符合面向对象的原始意图
https://ilily.site/actor-model/


Asymmetric coroutine含义
https://gqw.github.io/blog/2020/10/01/%E4%BB%8Ehellowold%E5%BC%80%E5%A7%8B%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAc-20-coroutine-ts/

协程是能暂停执行以在之后恢复的函数。协程是无栈的：
协程是能暂停执行以在之后恢复的函数。协程是无栈的：它们通过返回到调用方暂停执行，并且从栈分离存储恢复所要求的数据

6 https://juejin.cn/post/6844903715099377672
C++ 协程

7 https://zhuanlan.zhihu.com/p/29900855
  线程抢占执行的有栈协程？有阻塞系统调用导致的多核间切换的历史重演！
  https://www.zhihu.com/question/65370268
  如何评价百度开源的 RPC 框架 brpc？


  看了文章：https://zhuanlan.zhihu.com/p/29900855
  有不明白地方

  原句：阻塞IO操作，阻塞系统调用让线程A从核a切换到了核b，
  不明白：线程阻塞了，就是放弃cpu，怎么会线程在核内切换呢？

  原句：协程抢占操作：当一个协程在执行无阻塞io read时发现暂时无法执行
  不明白：协程是协作，不是抢占的，单cpu多核，这个也会发生切换呢？

  

  单核多线程的意义何在？陈硕都说单核开发多线程没有意义。
  1. 网上有说io阻塞，用多线程处理。，这个属于程序设计问题 epoll可以代替，更更好替代方案。这里说不通，不是主要原因
     大多都是致力于解决IO问题，说白了都是怎么样把阻塞变成非阻塞的手段。
  2. 网上有说cpu计算，多线程来回切换，在单核上更没意义了。

    3 网上有说 单核多线程是开发角度。模块化，功能拆分
    4 支持：多线程程序在单处理器上运行还是可以改善响应时间和吞吐量 UNIX 环境高级编程 第三版 中文版 383页

  单核上能使用多线程，在io阻塞情况下，降低平均响应时间，但是有意义不大，
  这个场景 可以用单线程 异步非阻塞实现。
  https://bbs.avplayer.org/t/asio/771



#### 第四天

- https://mthli.xyz/stackful-stackless/

- 英文： https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html

- https://mthli.xyz/coroutines-in-c/



